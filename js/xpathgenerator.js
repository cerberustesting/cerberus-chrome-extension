
this.TITLE_ID_UNIQUE="Best result. Should be stable. Anyway, make sure it is not an autogenerated one";
this.TITLE_ID_MULTIPLE="Bad result. Do not use. You could choose the specific one if pertinent.";

/*
Retrieve the highlighted element using specific attribute
 */
function getHighlightedElement() {
    return document.querySelector('*[data-cerberus-xpath-generator="selected"]');
}

function getHighlightedElementRowNumber(xpath){
    let allTargets = allTargetsFromXpath(xpath);
    let targetCount = 1;

    if (allTargets!=null) {
        try {
            let targetNode = allTargets.iterateNext();
            let escape = 0;

            while (targetNode && escape < 1000) {
                escape++;
                if (targetNode.getAttribute("data-cerberus-xpath-generator")=="selected") {
                    return targetCount;
                }
                targetCount++;
                targetNode = allTargets.iterateNext();
            }
        } catch (e) {
            console.warn("Error caught when attempting to call an XPathResult. Continuing.");
            console.warn(e);
        }
    }
    return targetCount;
}

/*
Get All target for an xpath
 */
function allTargetsFromXpath(xpath) {
    let allTargets = null;
    try {
        allTargets = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);
    } catch (e) {
        console.log("allTargetsFromXpath : Error [" + e + "]");
    }
    return allTargets;
}

function firstTargetFromXpath(xpath) {
    let xpathResult = allTargetsFromXpath(xpath);
    let xpathTarget;
    if (xpathResult) {
        if (xpathResult.resultType >= 4 && xpathResult.resultType <= 9) {
            try {
                xpathTarget = xpathResult.iterateNext();
                let escapeHatchCounter = 0;
                while (xpathTarget && escapeHatchCounter < 1000) {
                    if (!this.getHighlightedElement().contains(xpathTarget)) {
                        break;
                    } else {
                        xpathTarget = xpathResult.iterateNext();
                    }
                    escapeHatchCounter++;
                }
            } catch (e) {
                // Handle iterateNext() failures
            }
        }
    }
    return xpathTarget;
}

function countTargetsFromXpath(xpath) {
    let allTargets = allTargetsFromXpath(xpath);
    let targetCount = 0;

    if (allTargets!=null) {
        try {
            let targetNode = allTargets.iterateNext();
            let escape = 0;

            while (targetNode && escape < 1000) {
                escape++;
                if (document.contains(targetNode)) {
                    targetCount++;
                }
                targetNode = allTargets.iterateNext();
            }
        } catch (e) {
            console.warn("Error caught when attempting to call an XPathResult. Continuing.");
            console.warn(e);
        }
    }

    return targetCount;
}

// get xpath to attributes, returning several variations where possible
function getXpathAttributes(element) {
    let tagName = element.tagName ? element.tagName.toLowerCase() : null;
    let returnArr = [];
    let allAttribs = [];
    var attributeKeysToIgnore = [
        'data-cerberus-xpath-generator',
        'itemscope',
        'itemtype',
        'itemprop',
        'class',
        'id'
    ];

    if (tagName && element.attributes) {
        for (let i = 0; i < element.attributes.length; i++) {
            if (!attributeKeysToIgnore.includes(element.attributes[i].nodeName.toLowerCase())) {
                allAttribs.push({
                    'nodeName': element.attributes[i].nodeName,
                    'nodeValue': element.attributes[i].nodeValue
                });
            }
        }
    }

    var all = "";
    allAttribs.forEach((el) => {
        var xpathResult = getXpathObject("//" + tagName + "[@" + el.nodeName + "='" + el.nodeValue + "' and not(ancestor::dialog[@id='content-script-harness'])]", 5, 1);
        xpathResult.xpath = "//" + tagName + "[@" + el.nodeName + "='" + el.nodeValue + "']";
        returnArr.push(xpathResult);

        all = all == "" ? "@" + el.nodeName + "='" + el.nodeValue + "' " : all += " and @" + el.nodeName + "='" + el.nodeValue + "'";
    });

    if (allAttribs.length > 1) {
        var xpathResult = getXpathObject("//" + tagName + "[" + all + "]", 5, 1);
        returnArr.push(xpathResult);
        if(xpathResult.count>1){
            var option = getHighlightedElementRowNumber("//" + tagName + "[" + all + "]");
            var xpathResultSel = getXpathObject("(//" + tagName + "[" + all + "])["+option+"]", 3, 1);
            returnArr.push(xpathResultSel);
        }
    }

    return returnArr.length > 0 ? returnArr : undefined;
}


// generate xpath from the name of the tag itself
function getXpathTagname(element) {
    return element.tagName ? "//" + element.tagName.toLowerCase() : null;
}



/*
return xpath as ID only if on directly on targeted element
 */
function getXpathID(element) {
    var returnVal = [];
    if (element.id !== '') {
        var xpathResult = getXpathObject("//*[@id='" + element.id + "']", 5, 1, this.TITLE_ID_UNIQUE, this.TITLE_ID_MULTIPLE);
        returnVal.push(xpathResult);

        if(xpathResult.count>1){
            var option = getHighlightedElementRowNumber("//*[@id='" + element.id + "']");
            var xpathResultSel = getXpathObject("(//*[@id='" + element.id + "'])["+option+"]", 3, 1);
            returnVal.push(xpathResultSel);
        }
        return returnVal;
    } else {
        return null;
    }
}

/*
return xpath as ID only if on directly on targeted element
 */
function getXpathParentID(element) {
    var returnVal = [];
    var elementParent = element.parentNode;
    var tagName = element.tagName ? element.tagName.toLowerCase() : null;
    var tagParentName = elementParent.tagName ? elementParent.tagName.toLowerCase() : null;

    if (elementParent.id !== '' && tagName && tagParentName) {
        var xpathResult = getXpathObject("//"+tagParentName+"[@id='" + elementParent.id + "']/"+tagName, 5, 1);
        returnVal.push(xpathResult);

        if(xpathResult.count>1){
            var option = getHighlightedElementRowNumber("//"+tagParentName+"[@id='" + elementParent.id + "']/"+tagName);
            var xpathResultSel = getXpathObject("(//"+tagParentName+"[@id='" + elementParent.id + "']/"+tagName+")["+option+"]", 3, 1);
            returnVal.push(xpathResultSel);
        }
        return returnVal;
    } else {
        return null;
    }
}

/*
return xpath as ID only if on directly on targeted element
 */
function getXpathParentLevel2ID(element) {
    var returnVal = [];
    var elementParent = element.parentNode;
    var elementParentLevel2 = elementParent.parentNode;
    var tagName = element.tagName ? element.tagName.toLowerCase() : null;
    var tagParentName = elementParent.tagName ? elementParent.tagName.toLowerCase() : null;
    var tagParentLevel2Name = elementParentLevel2.tagName ? elementParentLevel2.tagName.toLowerCase() : null;

    if (elementParentLevel2.id !== '' && tagName && tagParentName && tagParentLevel2Name) {
        var xpathResult = getXpathObject("//"+tagParentLevel2Name+"[@id='" + elementParentLevel2.id + "']/"+tagParentName+"/"+tagName, 4, 1);
        returnVal.push(xpathResult);

        if(xpathResult.count>1){
            var option = getHighlightedElementRowNumber("//"+tagParentLevel2Name+"[@id='" + elementParentLevel2.id + "']/"+tagParentName+"/"+tagName);
            var xpathResultSel = getXpathObject("(//"+tagParentLevel2Name+"[@id='" + elementParentLevel2.id + "']/"+tagParentName+"/"+tagName+")["+option+"]", 3, 1);
            returnVal.push(xpathResultSel);
        }
        return returnVal;
    } else {
        return null;
    }
}

/*
generate xpath from class
 */
function getXPathClass(element) {
    var returnVal = [];
    var tagName = element.tagName ? element.tagName.toLowerCase() : null;
    var classList = element.className ? element.className : null;

    if (classList && typeof classList === "string" && tagName) {

        //Split the classes, and remove specific class
        var classArray = Array.from(classList.split(" "));
        classArray = classArray.filter(function(item) {
            return item !== "schema-highlighter-display-hover-node"
        })

        if (classArray.length != 0) {

            //get xpath with All Classes
            var xpathResult = getXpathObject("//" + tagName + "[@class='" + classArray.join(" ") + "']", 4, 1);
            xpathResult.count+=1;
            returnVal.push(xpathResult);

            //Loop on all classes
            if (classArray.length > 1) {
                classArray.forEach(function (el) {
                    var xpathResultArr = getXpathObject("//" + tagName + "[contains(@class, '" + el + "')]", 4, 1);
                    //Do not push the result of partial text if duplicated
                    if (xpathResultArr.count == 1) {
                        returnVal.push(xpathResultArr);
                    }
                    if (xpathResultArr.count>1) {
                        var option = getHighlightedElementRowNumber("//" + tagName + "[contains(@class, '" + el + "')]");
                        var xpathResultSel = getXpathObject("(//" + tagName + "[contains(@class, '" + el + "')])["+option+"]", 3, 1);
                        returnVal.push(xpathResultSel);
                    }
                });
            }
        }
    }
    return returnVal;
}

/*
Generate xpath from text
 */
function getXPathText(element) {
    var returnVal = [];
    var tagName = element.tagName ? element.tagName.toLowerCase() : null;
    var text = element.textContent ? element.textContent : null;

    if (text && typeof text === "string" && tagName) {

        //First return result with full text
        if (text) {
            var xpathResult = getXpathObject('//' + tagName + '[.="' + text + '"]', 5, 1);
            returnVal.push(xpathResult);

            if (xpathResult.count>1) {
                var option = getHighlightedElementRowNumber('//' + tagName + '[.="' + text + '"]');
                var xpathResultSel = getXpathObject('//' + tagName + '[.="' + text + '"])['+option+']', 3, 1);
                returnVal.push(xpathResultSel);
            }
        }

        //Then return result word by word if more than 1 word
        var textListArr = text.split(" ").filter(Boolean); // Remove empty strings
        if (textListArr.length > 1) {
            textListArr.forEach(function (el) {
                var xpathResultArr = getXpathObject('//' + tagName + '[contains(., "' + el + '")]', 4, 1);
                //Do not push the result of partial text if duplicated
                if (xpathResultArr.count == 1) {
                    returnVal.push(xpathResultArr);
                }
            });
        }
    }
    return returnVal;
}


/*
runs all possible xpath generator functions given an element,
and returns results as an array of xpaths
 */
function getAllXpaths(element) {
    var tempArr = [];

    // List of XPath generator functions
    var xpathMethods = [
        getXpathID,
        getXPathClass,
        getXPathText,
        getXpathAttributes,
        getXpathParentID,
        getXpathParentLevel2ID,
    ];


    if (element != null && element !== 'null' && element) {
        xpathMethods.forEach(function (fn) {
            var tempXpath = fn(element);

            if (tempXpath) {
                if (Array.isArray(tempXpath)) {
                    tempArr = tempArr.concat(tempXpath);
                } else {
                    tempArr.push(tempXpath);
                }
            }
        });
    }
    return tempArr;
}

/*
Get Xpath result Object
 */
function getXpathObject(xpath, levelSingle, levelMultiple, levelSingleTitle, levelMultipleTitle){
    var xpathResult = {};
    xpathResult.xpath = xpath;
    xpathResult.count = countTargetsFromXpath(xpath);
    xpathResult.level = xpathResult.count == 1 ? levelSingle : levelMultiple;
    xpathResult.title = xpathResult.count == 1 ? levelSingleTitle : levelMultipleTitle;
    return xpathResult;
}